//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrismNavigationTest.RIA.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'DomainService1' DomainService.
    /// </summary>
    public sealed partial class DomainService1 : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainService1"/> class.
        /// </summary>
        public DomainService1() : 
                this(new WebDomainClient<IDomainService1Contract>(new Uri("PrismNavigationTest-RIA-Web-DomainService1.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainService1"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DomainService1 service URI.</param>
        public DomainService1(Uri serviceUri) : 
                this(new WebDomainClient<IDomainService1Contract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainService1"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public DomainService1(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Person"/> entity instances that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<Person> Persons
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Person>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Person"/> entity instances using the 'GetPerson' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Person"/> entity instances.</returns>
        public EntityQuery<Person> GetPersonQuery()
        {
            this.ValidateMethod("GetPersonQuery", null);
            return base.CreateQuery<Person>("GetPerson", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetName' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetName(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("GetName", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetName", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetName' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetName()
        {
            this.ValidateMethod("GetName", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetName", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DomainService1EntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DomainService1' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IDomainService1Contract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetName' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetName", ReplyAction="http://tempuri.org/DomainService1/GetNameResponse")]
            IAsyncResult BeginGetName(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetName'.</param>
            /// <returns>The 'String' returned from the 'GetName' operation.</returns>
            string EndGetName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPerson' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetPersonDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetPerson", ReplyAction="http://tempuri.org/DomainService1/GetPersonResponse")]
            [WebGet()]
            IAsyncResult BeginGetPerson(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPerson'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPerson'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPerson' operation.</returns>
            QueryResult<Person> EndGetPerson(IAsyncResult result);
        }
        
        internal sealed class DomainService1EntityContainer : EntityContainer
        {
            
            public DomainService1EntityContainer()
            {
                this.CreateEntitySet<Person>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'Person' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/PrismNavigationTest.RIA.Web")]
    public sealed partial class Person : Entity
    {
        
        private int _age;
        
        private DateTime _birthDate;
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAgeChanging(int value);
        partial void OnAgeChanged();
        partial void OnBirthDateChanging(DateTime value);
        partial void OnBirthDateChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Person"/> class.
        /// </summary>
        public Person()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Age' value.
        /// </summary>
        [DataMember()]
        public int Age
        {
            get
            {
                return this._age;
            }
            set
            {
                if ((this._age != value))
                {
                    this.OnAgeChanging(value);
                    this.RaiseDataMemberChanging("Age");
                    this.ValidateProperty("Age", value);
                    this._age = value;
                    this.RaiseDataMemberChanged("Age");
                    this.OnAgeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BirthDate' value.
        /// </summary>
        [DataMember()]
        public DateTime BirthDate
        {
            get
            {
                return this._birthDate;
            }
            set
            {
                if ((this._birthDate != value))
                {
                    this.OnBirthDateChanging(value);
                    this.RaiseDataMemberChanging("BirthDate");
                    this.ValidateProperty("BirthDate", value);
                    this._birthDate = value;
                    this.RaiseDataMemberChanged("BirthDate");
                    this.OnBirthDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
